import uuid
from typing import Literal, Optional
from pydantic import BaseModel, Field
from datetime import date

# --- Core Enhancement Schemas ---

class Sentiment(BaseModel):
    """
    Represents the overall sentiment of the conversation, including a score
    and the reasoning behind the classification.
    """
    label: Literal["Positive", "Neutral", "Negative", "Mixed"] = Field(
        ...,
        description="The overall sentiment classification of the transcript."
    )
    score: float = Field(
        ...,
        ge=-1.0,
        le=1.0,
        description="A score from -1.0 (very negative) to 1.0 (very positive)."
    )
    reasoning: str = Field(
        ...,
        description="A brief explanation from the AI on why this sentiment was chosen."
    )

class KeyTopic(BaseModel):
    """
    Identifies a main theme or topic discussed in the transcript.
    """
    topic: str = Field(..., description="The name of the key topic, e.g., 'Code Readability'.")
    mentions: list[str] = Field(
        ...,
        description="Specific quotes or phrases from the transcript related to this topic."
    )
    importance_score: float = Field(
        ...,
        ge=0.0,
        le=1.0,
        description="A score indicating the topic's relevance and focus in the conversation."
    )

class TrackableActionItem(BaseModel):
    """
    An evolution of the basic action item, making it a structured, trackable task.
    """
    id: uuid.UUID = Field(default_factory=uuid.uuid4, description="Unique identifier for the action item.")
    description: str = Field(..., description="The specific task to be completed.")
    owner: str = Field(..., description="The person or role responsible for the action item, e.g., 'Liam Garcia'.")
    due_date: Optional[date] = Field(None, description="A suggested due date for the task.")
    status: Literal["To Do", "In Progress", "Completed", "Blocked"] = Field("To Do", description="The current status of the task.")

class ParticipantProfile(BaseModel):
    """
    Structured information about each participant in the conversation.
    """
    name: str = Field(..., description="The name of the participant.")
    role: Optional[str] = Field(None, description="The participant's role, e.g., 'Manager', 'Developer'.")
    sentiment_contribution: float = Field(
        ...,
        ge=-1.0,
        le=1.0,
        description="An estimated sentiment score for this participant's contributions."
    )

# --- The Main, Enriched Analysis Schema ---

class AdvancedAnalysis(BaseModel):
    """
    A comprehensive analysis that aggregates multiple layers of insight,
    representing the full output of an advanced coaching agent.
    """
    id: uuid.UUID = Field(..., description="The unique ID for the analysis.")
    meeting_title: str = Field("Coaching Session", description="A generated title for the meeting.")
    summary: str = Field(..., description="The concise summary of the transcript.")
    sentiment: Sentiment = Field(..., description="The overall sentiment analysis of the conversation.")
    participants: list[ParticipantProfile] = Field(..., description="Profiles of the conversation participants.")
    key_topics: list[KeyTopic] = Field(..., description="A list of the most important topics discussed.")
    action_items: list[TrackableActionItem] = Field(..., description="A structured list of trackable next steps.")

# --- Schemas for Agent Interaction ---

class FollowUpRequest(BaseModel):
    """
    Schema for a user to ask a clarifying question about an analysis.
    """
    analysis_id: uuid.UUID = Field(..., description="The ID of the analysis to ask about.")
    question: str = Field(..., description="The user's follow-up question, e.g., 'What was Liam's biggest concern?'")

class FollowUpResponse(BaseModel):
    """
    The agent's answer to a user's follow-up question.
    """
    answer: str = Field(..., description="The AI-generated answer to the user's question.")
    supporting_quotes: list[str] = Field(
        [],
        description="Direct quotes from the transcript that support the answer."
    )

class ContentGenerationRequest(BaseModel):
    """
    Schema for requesting the agent to generate content based on the analysis.
    """
    analysis_id: uuid.UUID = Field(..., description="The ID of the analysis to use as a source.")
    target_format: Literal["email_summary", "slack_update", "meeting_agenda"] = Field(
        ...,
        description="The desired format for the generated content."
    )
    recipients: Optional[list[str]] = Field(None, description="A list of recipients for formats like 'email'.")

class GeneratedContent(BaseModel):
    """
    The structured content generated by the agent.
    """
    format: str = Field(..., description="The format of the content that was generated.")
    subject: Optional[str] = Field(None, description="A generated subject line (for emails).")
    body: str = Field(..., description="The main body of the generated content.")